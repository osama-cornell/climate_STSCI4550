---
title: 'Homework #11'
author: "Osama Awadalla"
date: "04/09/2024"
output:
  word_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Statistical Computing - Exercises 11 - Spatial Modeling of Ames Housing Data

```{r}
ames <- read.csv("~/Desktop/STSCI 4520/ames_housing.csv")
```


## Exercises

1. Make two informative spatial plots of the data. One of them should
   visualize the sale prices of the data. Use plotting symbols,
   colors, etc. to get as much important information about the houses into 
   the plot, without being  overwhelming visually. For a challenge,
   try to get the spatial aspect ratio close to correct (recall how
   spherical coordinates work). Indicate on your plot where the
   outliers mentioned in the video are.
   
```{r}
library(ggplot2)
library(sf)
library(scales)
library(dplyr)

#Getting outliers and their index 
ames$Year_Sold <- factor(ames$Year_Sold)
ind_outliers <- ames$Gr_Liv_Area > 4000 & ames$Sale_Price < 300000
outliers <- ames[ind_outliers,]
outliers_df <- outliers[,c("Longitude","Latitude","Sale_Price")]
#Spatial plot using sales price
ames_spatial <- st_as_sf(ames, coords = c("Longitude", "Latitude"))
ggplot(data = ames_spatial) +
  geom_sf(aes(color = Sale_Price), size = 0.5) +
  scale_color_gradient(low = "lightblue", high = "darkred") +
  geom_point(data = outliers_df, aes(x = Longitude, y = Latitude), color = "yellow", size = 1.5) +
                                      labs(title = "Sales Prices")
#It's hard to see the third point since all of the outliers are so close to each other
#Yellow points are outliers

#Other plot using lot area
ggplot(data = ames_spatial) +
  geom_sf(aes(color = Gr_Liv_Area), size = 0.5) +
  scale_color_gradientn(colors = rainbow(10)) +
  geom_point(data = outliers_df, aes(x = Longitude, y = Latitude), color = "black", size = 1.5) +
  labs(title = "Sales Prices")
#In this case black is the outlier

#From the plots we can see that the big and expensive houses tend to be in the 
#same neighborhoods
```
   
   
2. Remove the outliers from all of your model fits below.

```{r}
#Outliers already saved
```

   
3. Fit two models to the sale prices. One should not include 
   neighborhood effects, and one should. Include at least one
   important variable not discussed in the video. 
   Display the non-neighborhood model coefficients side by side.
   
```{r}
numeric_cov <- ames %>% select_if(is.numeric)
categorical_cov <- ames %>% select_if(is.character)
names(categorical_cov)
dim(numeric_cov)
dim(categorical_cov)
dim(ames)
pairs(numeric_cov[,c(15,1:4)])
pairs(numeric_cov[,c(15,5:9)])
pairs(numeric_cov[,c(15,10:13)])
pairs(numeric_cov[,14:17])
#replacing total bedrooms with total rooms

model1 <- lm(Sale_Price ~ Gr_Liv_Area + Total_Bsmt_SF + Full_Bath + Half_Bath +
Garage_Area + TotRms_AbvGrd + Year_Sold + Overall_Cond,
data = ames, subset = !ind_outliers)
summary(model1)

model2 <- lm(Sale_Price ~ Gr_Liv_Area + Total_Bsmt_SF + Full_Bath + Half_Bath +
Garage_Area + TotRms_AbvGrd + Year_Sold + Overall_Cond + Neighborhood,
data = ames, subset = !ind_outliers)
summary(model2)

cbind(model1$coefficients,model2$coefficients[1:length(model1$coefficients)])
```
   
   
4. Make two new spatial plots of the *residuals* of the sale prices
   from the two models, side by side. Be careful here because
   residuals can be negative. Make sure to distinguish between
   positive and negative residuals in the plot. 
   Describe the differences between the two plots.
   
```{r}
library(gridExtra)
new_ames <- ames[!ind_outliers,]
new_ames$residual1 <- model1$residuals
new_ames$residual2 <- model2$residuals

#For model1
ames_spatial <- st_as_sf(new_ames, coords = c("Longitude", "Latitude"))
plot1 <- ggplot(data = ames_spatial) +
  geom_sf(aes(color = residual1), size = 0.5) +
 scale_color_gradient2(low = "darkblue", mid = "white", high = "darkred", midpoint = 0) +
                                      labs(title = "Residuals (M1)")
#For model2
ames_spatial <- st_as_sf(new_ames, coords = c("Longitude", "Latitude"))
plot2 <- ggplot(data = ames_spatial) +
  geom_sf(aes(color = residual2), size = 0.5) +
 scale_color_gradient2(low = "darkblue", mid = "white", high = "darkred", midpoint = 0) +
                                      labs(title = "Residuals (M2)")
grid.arrange(grobs = list(plot1,plot2), nrow = 2)

#Residuals are less extreme in model2 plot
```
   
   
5. Use the `fit_model` function from the GpGp R package to fit
   a spatial model to the data. You will have to read some documentation,    
   but here are a couple of hints: use the `matern_sphere` covariance
   function, and use the `model.matrix` function to construct
   the design matrix. Display the coefficients from your fitted model
   in comparison to your previous models. 
   (make sure you set `silent = TRUE` to avoid printing optimization
   information).
   
```{r}
library(GpGp)
library(fields)
design_matrix <- model.matrix(~ Gr_Liv_Area + Total_Bsmt_SF + Full_Bath + Half_Bath +
Garage_Area + TotRms_AbvGrd + Year_Sold + Overall_Cond, new_ames)

spatial_model <- fit_model(y = new_ames$Sale_Price,locs = new_ames[,c("Longitude","Latitude")], X = design_matrix, covfun_name = "matern_sphere", silent = TRUE)
summary(spatial_model)

cbind(spatial_model$betahat, model1$coefficients,model2$coefficients[1:length(model1$coefficients)])
```
   
   
6. Use `expand.grid` to create a 50 by 50 spatial grid of locations
   that covers the locations in the dataset. Make a spatial plot
   showing the locations of the houses and the grid points.
   
```{r}
min_long <- min(new_ames$Longitude)
max_long <- max(new_ames$Longitude)
min_lat <- min(new_ames$Latitude)
max_lat <- max(new_ames$Latitude)
long <- seq(min_long,max_long,length.out = 50)
lat <- seq(min_lat, max_lat, length.out = 50)
grid <- expand.grid(long, lat)

ggplot() +
  geom_point(data = new_ames, aes(x = Longitude, y = Latitude), color = "blue") +  
  geom_point(data = grid, aes(x = Var1, y = Var2), color = "red", size = 0.5) +   
  labs(title = "Grid with Houses")
```
   
   
7. Use the `predictions` function from the GpGp R package to predict
   the price of a typical home located at all of the grid locations.
   "Typical home" means that you have to select values of all of
   the covariates in your model. For numeric covariates, select
   the average value, and for factors, select the most common factor
   level.
   
```{r}
Liv_Area <- rep(mean(new_ames$Gr_Liv_Area),dim(grid)[1])
Basement <- rep(mean(new_ames$Total_Bsmt_SF), dim(grid)[1])
Full_Bath <- rep(mean(new_ames$Full_Bath), dim(grid)[1])
Half_Bath <- rep(mean(new_ames$Half_Bath), dim(grid)[1])
Garage <- rep(mean(new_ames$Garage_Area), dim(grid)[1])
Bedroom <- rep(mean(new_ames$TotRms_AbvGrd), dim(grid)[1])
Year_Sold <- names(table(new_ames$Year_Sold))[which.max(table(new_ames$Year_Sold))]
Condition <- names(table(new_ames$Overall_Cond))[which.max(table(new_ames$Overall_Cond))]
Year_Sold_mat <- matrix(c(rep(1,dim(grid)[1]),rep(0,dim(grid)[1]), rep(0,dim(grid)[1]), rep(0,dim(grid)[1])), nrow = dim(grid)[1], ncol = 4)
Condition_mat <- matrix(c(rep(1,dim(grid)[1]),rep(0,dim(grid)[1]), rep(0,dim(grid)[1]), rep(0,dim(grid)[1]), rep(0,dim(grid)[1]), rep(0,dim(grid)[1]), rep(0,dim(grid)[1]), rep(0,dim(grid)[1])), nrow = dim(grid)[1], ncol = 8)

pred_design <- cbind(rep(1,dim(grid)[1]),Liv_Area,Basement, Full_Bath, Half_Bath, Garage, Bedroom, Year_Sold_mat,Condition_mat)

spatial_preds <- predictions(fit = spatial_model, locs_pred = grid, X_pred = pred_design)
```
   
   
8. Make a spatial map of the predicted values. To make a really nice
   one, consider using the `image` function or the `image.plot` 
   function from the fields package.
   
```{r}
sf_grid <- st_as_sf(grid, coords = c("Var1", "Var2"))
ggplot(data = sf_grid) +
  geom_sf(aes(color = spatial_preds), size = 0.5) +
 scale_color_gradientn(colors = rainbow(10)) +
labs(title = "Predictions")
```
   
   